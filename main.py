import logging
import joblib
from sklearn.cluster import KMeans
import aiogram.utils.exceptions
import aiohttp
import numpy as np


#aiogram –∏ –≤—Å—ë —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, types, executor
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from DataPostgre import dbworker
import KeyboardButton as kb
import custom_answer as cus_ans
import config
from config import host, user, password, db_name
from state import CreateProfile, SearchProfile, EditProfile, Add_bot, check_id, req_del, QuestionStatesGroup

BOT_TOKEN = config.BOT_TOKEN

#–∑–∞–¥–∞—ë–º –ª–æ–≥–∏ and –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = dbworker(host=host, user=user, password=password, db_name=db_name)

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state='*')
async def start(msg: types.Message):
    await msg.answer('–ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–∑–µ–πüë´', reply_markup=kb.start())
    if (not db.user_exists(msg.from_user.id)):
        db.add_user(msg.from_user.username, msg.from_user.id, msg.from_user.full_name)
        await bot.send_message(config.chat_id_group, f'[INFO]–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nID - {str(msg.from_user.id)}\nusername - {str(msg.from_user.username)}')


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async def get_city_name(latitude, longitude):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://nominatim.openstreetmap.org/reverse?lat={latitude}&lon={longitude}&format=json") as response:
            data = await response.json()
            city = data.get('address', {}).get('city')
            return city


@dp.message_handler(lambda msg: msg.text == '–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–ºüëå' or msg.text == '/magic_start', state='*')
async def magic_start(msg: types.Message):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é —Å–∞–º–æ–≥–æ –±–æ—Ç–∞'''
    #–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    button_search = KeyboardButton('–ü–æ–∏—Å–∫üîç')
    button_create_profile = KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå')
    button_edit_profile = KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å')
    button_admin = KeyboardButton('–ê–¥–º–∏–Ω–∫–∞‚öôÔ∏è')
    menu = ReplyKeyboardMarkup(resize_keyboard=True)

    if (not db.profile_exists(msg.from_user.id)):
            menu.add(button_search, button_create_profile)
    elif (db.profile_exists(msg.from_user.id)):
        menu.add(button_search, button_edit_profile)
    if msg.from_user.id in config.ADMIN_LIST:
        menu.add(button_admin)
    await msg.answer('–¢–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥—É—Ç, –ø–æ–¥–æ–∂–¥–µ–º...', reply_markup=menu)


#—Ö–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå', state='*')
async def create_profile(message: types.Message):
    if message.from_user.username != None:
        if (not db.profile_exists(message.from_user.id)):
            await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤\n\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –∏–º–µ–Ω–∏, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?üòâ", reply_markup=kb.btn_exit())
            await CreateProfile.name.set()
        elif (db.profile_exists(message.from_user.id)) :
            await message.answer('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞\n\n')
    else:
        await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -> Edit Profile(–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å) –∏ –∂–º—è–∫–∞–π—Ç–µ add username\n\n–¢–∞–º –≤–≤–æ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –∏ –≤—É–∞–ª—è')

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º—è
@dp.message_handler(state=CreateProfile.name)
async def create_profile_name(message: types.Message, state: FSMContext):
    if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
        await state.finish()
        await magic_start(message)
        return
    if len(str(message.text)) < 35 and (not str(message.text) in cus_ans.ban_symvols):
        await state.update_data(profile_name=message.text.lower())
        await message.reply('–¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é')
        await CreateProfile.next()
    elif str(message.text) in cus_ans.ban_symvols:
        await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É')
    else:
        await message.answer(cus_ans.random_reapeat_list())
        #–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        return

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

@dp.message_handler(state=CreateProfile.description)
async def create_profile_description(message: types.Message, state: FSMContext):
    if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
        await state.finish()
        await magic_start(message)
        return
    if len(message.text) < 250 and (not str(message.text) in cus_ans.ban_symvols):
        await state.update_data(profile_description=message.text)
        await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüëá –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', reply_markup=kb.keyboard_for_loc())
        await CreateProfile.next()
    elif str(message.text) in cus_ans.ban_symvols:
        await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É')
    else:
        await message.answer(cus_ans.random_reapeat_list())
        #–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        return

# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.message_handler(state=CreateProfile.city, content_types=[ContentType.LOCATION, types.ContentType.TEXT])
async def create_profile_city(message: types.Message, state: FSMContext):

    if message.content_type == types.ContentType.LOCATION:
        latitude = message.location.latitude
        longitude = message.location.longitude

        city = await get_city_name(latitude, longitude)

        if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
            await state.finish()
            await magic_start(message)
            return
        if len(city) < 35 and (not str(city) in cus_ans.ban_symvols):
            await state.update_data(profile_city=city.lower())
            await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º —Ñ–æ—Ç–æüñº\n\n–í–∞–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º!')
            await CreateProfile.next()
        elif str(message.text) in cus_ans.ban_symvols:
            await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É', reply_markup=kb.keyboard_for_loc())
        else:
            await message.answer(cus_ans.random_reapeat_list())
            #–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            return
    elif message.content_type == types.ContentType.TEXT:
        city = message.text.title()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–æ—Ä–æ–¥)
        if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
            await state.finish()
            await magic_start(message)
            return
        if len(city) < 35 and (not str(city) in cus_ans.ban_symvols):
            await state.update_data(profile_city=city.lower())
            await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º —Ñ–æ—Ç–æüñº\n\n–í–∞–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º!')
            await CreateProfile.next()
        elif str(message.text) in cus_ans.ban_symvols:
            await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É', reply_markup=kb.keyboard_for_loc())
        else:
            await message.answer(cus_ans.random_reapeat_list())
            #–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            return


#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message_handler(state=CreateProfile.photo, content_types=ContentType.PHOTO)
async def create_profile_photo(message: types.Message, state: FSMContext):
    if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
        await state.finish()
        await magic_start(message)
    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    await message.answer('–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª', reply_markup=kb.btn_gender())
    await CreateProfile.next()

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–∞
@dp.message_handler(state=CreateProfile.sex)
async def create_profile_sex(message: types.Message, state: FSMContext):
    if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
        await state.finish()
        await magic_start(message)
        return
    if message.text == '–ú—É–∂—á–∏–Ω–∞' or message.text == '–ñ–µ–Ω—â–∏–Ω–∞':
        await state.update_data(profile_sex=message.text.lower())
        await message.answer('–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º —Ç–≤–æ–π –≤–æ–∑–≤—Ä–∞—Å—Ç')
        await CreateProfile.next()
    else:
        await message.answer(cus_ans.random_reapeat_list())
        #–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        return

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Å—Ç–∞
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message_handler(state=CreateProfile.age)
async def create_profile_age(message: types.Message, state: FSMContext):
    try:
        if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
            await state.finish()
            await magic_start(message)
            return
        if 13 <= int(message.text) <= 71:
            await state.update_data(profile_age=message.text)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Ö–æ–±–±–∏ (–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=create_hobbies_keyboard())
            await CreateProfile.hobbies.set()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.')
            await message.answer(cus_ans.random_reapeat_list())
            return
    except:
        await message.answer(cus_ans.random_reapeat_list())
        return


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ö–æ–±–±–∏
def create_hobbies_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=3)
    for hobby in config.hobbies:
        keyboard.insert(InlineKeyboardButton(hobby, callback_data=f"hobby_{hobby}"))
    keyboard.add(InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_selection"))
    return keyboard


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–æ–±–±–∏
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('hobby_'), state=CreateProfile.hobbies)
async def process_callback_hobby(callback_query: types.CallbackQuery, state: FSMContext):
    hobby = callback_query.data[6:]
    user_id = callback_query.from_user.id

    if user_id not in config.user_choices:
        config.user_choices[user_id] = []

    if hobby in config.user_choices[user_id]:
        config.user_choices[user_id].remove(hobby)
    else:
        config.user_choices[user_id].append(hobby)

    await bot.answer_callback_query(callback_query.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {hobby}")

@dp.callback_query_handler(lambda c: c.data == 'finish_selection', state=CreateProfile.hobbies)
async def finish_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    chosen_hobbies = config.user_choices.get(user_id, [])

    if not chosen_hobbies:
        response = "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö–æ–±–±–∏."
    else:
        await state.update_data(profile_hobbies=';'.join(chosen_hobbies))

    user_data = await state.get_data()
    db.create_profile(
        user_id, callback_query.from_user.username,
        user_data['profile_name'], user_data['profile_description'],
        user_data['profile_city'], user_data['photo'],
        user_data['profile_sex'], user_data['profile_age'],
        user_data['profile_hobbies']
    )
    await state.finish()
    await magic_start(callback_query.message)


#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—åüóë')
async def delete_profile(message: types.Message):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã'''
    await send_log(message)
    try:
        db.delete_profile(message.from_user.id)
        await message.answer('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
        await magic_start(message)
    except:
        await message.answer(cus_ans.random_reapeat_list())
        return


@dp.message_handler(lambda message: message.text == '–†–µ–¥. –∞–Ω–∫–µ—Ç—Éüìù')
async def edit_profile(message: types.Message):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã'''
    await send_log(message)
    try:
        if(not db.profile_exists(message.from_user.id)):
            await message.answer('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã!')
        elif(db.profile_exists(message.from_user.id)) :
            photo = db.all_profile(message.from_user.id)[0][6]
            caption = f'–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\nüåü{str(db.all_profile(message.from_user.id)[0][3]).title()}, {db.all_profile(message.from_user.id)[0][8]} –≥–æ–¥–∞üåü\nüìç{str(db.all_profile(message.from_user.id)[0][5]).title()}\n\n"<i>{str(db.all_profile(message.from_user.id)[0][4])}</i>"\n\n<tg-spoiler>{" ".join([f"‚óè<b>{i}</b>" for i in db.all_profile(message.from_user.id)[0][9].split(";")])}</tg-spoiler>'
            await message.answer_photo(photo, caption=caption, reply_markup=kb.btn_edit())
    except Exception as e:
        await message.answer(cus_ans.random_reapeat_list())
        print(e)
        return


#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ
@dp.message_handler(lambda message: message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æüîÑ')
async def edit_profile_again(message: types.Message):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ'''
    await send_log(message)
    try:
        db.delete_profile(message.from_user.id)
        await create_profile(message)

    except Exception as e:
        await message.answer(cus_ans.random_reapeat_list())
        print(e)
        return


#—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Å—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Çüë∂' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µüìù')
async def edit_profile_age(message: types.Message):
    try:
        if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Çüë∂':
            await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑–≤—Ä–∞—Å—Ç', reply_markup=kb.btn_cancel())
            await EditProfile.age_edit.set()
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µüìù':
            await message.answer('–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã!', reply_markup=kb.btn_cancel())
            await EditProfile.description_edit.set()
    except Exception as e:
        await message.answer(cus_ans.random_reapeat_list())
        print(e)
        return

@dp.message_handler(state=EditProfile.age_edit)
async def edit_profile_age_step2(message: types.Message, state: FSMContext):
    await send_log(message)
    try:
        if str(message.text) == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
            await state.finish()
            await magic_start(message)

            return
        elif int(message.text) < 13:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.')
            await message.answer(cus_ans.random_reapeat_list())

            #–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            return
        elif int(message.text) > 71:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.')
            await message.answer(cus_ans.random_reapeat_list())

            #–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            return
        elif int(message.text) > 6 and int(message.text) < 54:
            await message.answer('–í–æ–∑–≤—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ë–Ω!')
            await state.update_data(edit_profile_age=message.text)
            user_data = await state.get_data()

            db.edit_age(user_data['edit_profile_age'], str(message.from_user.id))
            await state.finish()
            await edit_profile(message)
    except Exception as e:
        await message.answer(cus_ans.random_reapeat_list())
        return
@dp.message_handler(state=EditProfile.description_edit)
async def edit_profile_description(message: types.Message, state: FSMContext):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–¥'''
    await send_log(message)
    try:
        if str(message.text) == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
            await state.finish()
            await magic_start(message)

            return
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!')
        await state.update_data(edit_profile_description=message.text)
        user_data = await state.get_data()

        db.edit_description(user_data['edit_profile_description'], str(message.from_user.id))
        await state.finish()
        await edit_profile(message)
    except Exception as e:
        await message.answer(cus_ans.random_reapeat_list())
        print(e)
        return

@dp.message_handler(lambda message: message.text == '–í—ã–π—Ç–∏‚ùå')
async def exit(message: types.Message):
    await magic_start(message)

''''''


#—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–Ω–∫–µ—Ç–∞–º
@dp.message_handler(lambda message: message.text == '–ü–æ–∏—Å–∫üîç')
async def search_profile(message: types.Message, state: FSMContext):
    await send_log(message)
    try:
        if db.profile_exists(message.from_user.id) == False:
            await message.answer('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∑–∞–ø–æ–ª–Ω–∏ –µ—ë, –∞ –ø–æ—Ç–æ–º –ø—Ä–∏—Ö–æ–¥–∏ —Å—é–¥–∞!')
        else:
            if (bool(len(db.search_profile(str(db.get_info(message.from_user.id)[8]), str(db.get_info(message.from_user.id)[7]))))):
                try:
                    profile_id = db.search_profile(str(db.get_info(message.from_user.id)[8]), str(db.get_info(message.from_user.id)[7]))[db.search_profile_status(message.from_user.id)[0]][0]
                except:
                    db.edit_zero_profile_status(message.from_user.id)
                    profile_id = db.search_profile(str(db.get_info(message.from_user.id)[8]), str(db.get_info(message.from_user.id)[7]))[db.search_profile_status(message.from_user.id)[0]][0]
                await state.update_data(last_profile_id=profile_id)
                db.edit_profile_status(str(message.from_user.id), db.search_profile_status(str(message.from_user.id))[0])

                name_profile = str(db.get_info(profile_id)[3])
                age_profile = str(db.get_info(profile_id)[8])
                description_profile = str(db.get_info(profile_id)[4])
                photo_profile = db.get_info(profile_id)[6]

                city = str(db.get_info(profile_id)[5])

                final_text_profile = f'{name_profile},{age_profile},{city} - {description_profile}'

                await message.answer_photo(photo_profile, caption=final_text_profile, reply_markup=kb.btn_estimator())

                await SearchProfile.next()
            else:
                await message.answer('–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –∏–ª–∏ —Ç–∞–º –Ω–µ—Ç –∞–Ω–∫–µ—Ç :(')
                await state.finish()

            await SearchProfile.in_doing.set()
    except Exception as e:
        await message.answer(cus_ans.random_reapeat_list())
        print(e)
        return


@dp.message_handler(state=SearchProfile.in_doing)
async def seach_profile_step3(message: types.Message, state: FSMContext):
    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–µ–π –æ—Ü–µ–Ω–∫–∏(–ª–∞–π–∫,–¥–∏–∑–ª–∞–π–∫,—Ä–µ–ø–æ—Ä—Ç)'''
    await send_log(message)
    try:
        if str(message.text) == '‚ù§Ô∏è':
            if str(message.text) == '/start' or str(message.text) == '–í—ã–π—Ç–∏‚ùå':
                await state.finish()
                await magic_start(message)

            user_data = await state.get_data()

            try:
                profile_id = db.search_profile(str(db.get_info(message.from_user.id)[8]), str(db.get_info(message.from_user.id)[7]))[db.search_profile_status(message.from_user.id)[0]][0]
            except IndexError:
                db.edit_zero_profile_status(message.from_user.id)
                profile_id = db.search_profile(str(db.get_info(message.from_user.id)[8]), str(db.get_info(message.from_user.id)[7]))[db.search_profile_status(message.from_user.id)[0]][0]
            except Exception as e:
                print(e)
                await state.finish()
                await magic_start(message)
            await state.update_data(last_profile_id=profile_id)
            if db.add_like_exists(str(message.from_user.id), user_data['last_profile_id']) == False:
                db.add_like(message.from_user.id, user_data['last_profile_id'])
            db.edit_profile_status(message.from_user.id, db.search_profile_status(str(message.from_user.id))[0])
            name_profile = str(db.get_info(profile_id)[3])
            age_profile = str(db.get_info(profile_id)[8])
            description_profile = str(db.get_info(profile_id)[4])

            photo_profile = db.get_info(profile_id)[6]

            city = str(db.get_info(profile_id)[5]).title()

            final_text_profile = f'–°–º–æ—Ç—Ä–∏, –∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è –Ω–∞—à—ë–ª‚ò∫Ô∏è\n\n{name_profile},{age_profile},{city} - {description_profile}'

            await message.answer_photo(photo_profile, caption=final_text_profile)

            name_profile_self = str(db.get_info(message.from_user.id)[3])
            age_profile_self = str(db.get_info(message.from_user.id)[8])
            description_profile_self = str(db.get_info(message.from_user.id)[4])

            photo_profile_self = db.get_info(message.from_user.id)[6]
            city = str(db.get_info(message.from_user.id)[5]).title()

            final_text_profile_self = f'–¢–æ–±–æ–π –∫—Ç–æ —Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è!\n\n{name_profile_self}, {age_profile_self}, {city} - {description_profile_self}\n\n–ß–µ–≥–æ —Ç—ã –∂–¥—ë—à—å,–±–µ–≥–∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è - @{str(message.from_user.username)}'

            await bot.send_photo(user_data['last_profile_id'], photo_profile_self, caption=final_text_profile_self)


            return
            await state.finish()
        elif str(message.text) == 'üëé':
            if str(message.text) == '/start' or str(message.text) == '–í—ã–π—Ç–∏‚ùå':
                await state.finish()
                await magic_start(message)

            try:
                profile_id = db.search_profile(str(db.get_info(message.from_user.id)[8]), str(db.get_info(message.from_user.id)[7]))[db.search_profile_status(message.from_user.id)[0]][0]
            except IndexError:
                db.edit_zero_profile_status(message.from_user.id)
                profile_id = db.search_profile(str(db.get_info(message.from_user.id)[8]), str(db.get_info(message.from_user.id)[7]))[db.search_profile_status(message.from_user.id)[0]][0]
            except Exception as e:
                print(e)
                await state.finish()
                await magic_start(message)

            await state.update_data(last_profile_id=profile_id)

            db.edit_profile_status(message.from_user.id, db.search_profile_status(message.from_user.id)[0])
            name_profile = str(db.get_info(profile_id)[3])
            age_profile = str(db.get_info(profile_id)[8])
            description_profile = str(db.get_info(profile_id)[4])
            photo_profile = db.get_info(profile_id)[6]

            city = str(db.get_info(profile_id)[5]).title()


            final_text_profile = f'–°–º–æ—Ç—Ä–∏, –∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è –Ω–∞—à—ë–ª‚ò∫Ô∏è\n\n{name_profile},{age_profile},{city} - {description_profile}'

            await message.answer_photo(photo_profile, caption=final_text_profile)

        else:
            await state.finish()
            await magic_start(message)
    except aiogram.utils.exceptions.ChatNotFound:
        await bot.send_message(config.chat_id_group, f'[INFO] –†–µ–ø–æ—Ä—Ç, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ ID - {db.return_id(profile_id)}')
    except Exception as e:
        await message.answer(cus_ans.random_reapeat_list())
        await state.finish()
        await magic_start(message)
        print(e)
        return

### –ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤/–æ–ø—Ä–æ—Å–æ–≤

@dp.message_handler(lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def admin(msg: types.Message):
    await bot.send_message(msg.chat.id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å‚¨áÔ∏è', reply_markup=kb.btn_for_btnprofile())


### -----

#–∞–¥–º–∏–Ω–∫–∞
@dp.message_handler(lambda message: message.text == '–ê–¥–º–∏–Ω–∫–∞‚öôÔ∏è')
async def admin(msg: types.Message):
    if msg.from_user.id in config.ADMIN_LIST:
        await msg.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–µ!', reply_markup=kb.keyboard_forAdmins())
    else:
        await msg.answer('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')


@dp.message_handler(text='Add Bot')
async def cmd_bot_admin(msg: types.Message):
    if msg.from_user.id in config.ADMIN_LIST:
        await send_log(msg)
        await bot.send_message(msg.from_user.id, '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å –∫ –Ω–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ(–∏–º—è-id –¥–ª—è –±–æ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ-–≥–æ—Ä–æ–¥-–ø–æ–ª-–≤–æ–∑—Ä–∞—Å—Ç)')
        await Add_bot.date.set()
    else:
        await msg.answer('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')

@dp.message_handler(content_types=['photo'], state=Add_bot.date)
async def add_bot_desc(msg: types.Message, state: FSMContext):
    try:
        if msg.from_user.id in config.ADMIN_LIST:
            if str(msg.text) == '–í—ã–π—Ç–∏‚ùå':
                await state.finish()
                await magic_start(msg)
                return
            if msg.text:
                photo_id = msg.photo[-1].file_id
                caption = msg.caption
                mss_caption = caption.split('-')
                tg_id = mss_caption[1]
                tg_username = '@---'
                name_profile = mss_caption[0]
                description_profile = mss_caption[2]
                city = mss_caption[3]
                sex = mss_caption[4]
                age_profile = mss_caption[5]

                final_text = f'{name_profile},{age_profile},{city} - {description_profile}'
                await bot.send_photo(msg.from_user.id, photo=photo_id, caption=final_text)
                db.create_profile(tg_id, tg_username, name_profile, description_profile, city, photo_id, sex, age_profile)
                await state.finish()
        else:
            await msg.answer('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')
    except Exception as e:
        await msg.answer(cus_ans.random_reapeat_list())
        await state.finish()
        await magic_start(msg)
        print(e)
        return

@dp.message_handler(text='Count-Bot')
async def get_number_bots(message: types.Message):
    if message.from_user.id in config.ADMIN_LIST:
        await bot.send_message(message.from_user.id, f'Id –±–æ—Ç–æ–≤: {db.get_count_bot()}')
    else:
        await bot.send_message(message.from_user.id, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')

@dp.message_handler(text='Id-profile')
async def check_profile(message: types.Message):
    if message.from_user.id in config.ADMIN_LIST:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è(ID)')
        await check_id.id.set()
    else:
        await bot.send_message(message.from_user.id, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')

@dp.message_handler(state=check_id.id)
async def input_id(message: types.Message, state: FSMContext):
    try:
        if message.from_user.id in config.ADMIN_LIST:
            if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
                await state.finish()
                await magic_start(message)

            array = db.get_profile(int(message.text))

            city = array[0][5]
            name = array[0][3]
            photo = array[0][6]
            description = array[0][4]
            sex = array[0][7]
            age = array[0][8]
            id = array[0][0]
            await bot.send_photo(message.from_user.id, photo=photo, caption=f'–ù–æ–º–µ—Ä - {id}\n{name}, {city}, {description}\n{sex}, {age}')

        else:
            await bot.send_message(message.from_user.id, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')
    except Exception as e:
        await bot.send_message(message.from_user.id, cus_ans.random_reapeat_list())
        await state.finish()
        await magic_start(message)
        print(e)
        return


@dp.message_handler(text='Del-Bot')
async def check_profile(message: types.Message):
    if message.from_user.id in config.ADMIN_LIST:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è(ID)')
        await req_del.id.set()
    else:
        await bot.send_message(message.from_user.id, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')


@dp.message_handler(state=req_del.id)
async def input_id(message: types.Message, state: FSMContext):
    try:
        if message.from_user.id in config.ADMIN_LIST:
            if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
                await state.finish()
                await magic_start(message)

            db.request_delete_profile(int(message.text))
            await bot.send_message(message.from_user.id, '–£–¥–∞–ª–µ–Ω–æ!')
        else:
            await bot.send_message(message.from_user.id, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')
    except Exception as e:
        await bot.send_message(message.from_user.id, cus_ans.random_reapeat_list())
        await state.finish()
        await magic_start(message)
        print(e)
        return


@dp.message_handler(state='*')
async def send_log(message: types.Message):
    await bot.send_message(config.chat_id_group, f'ID - {str(message.from_user.id)}\nusername - {str(message.from_user.username)}\nmessage - {str(message.text)}')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)