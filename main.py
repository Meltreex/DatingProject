import asyncio
import logging
import datetime
from datetime import timedelta
import random
import aiohttp


#aiogram –∏ –≤—Å—ë —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, types, executor
# from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

#–∫–æ–Ω—Ñ–∏–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
#–∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
import custom_answer as cus_ans
from database import dbworker
import config
import KeyboardButton as kb
import os.path

BOT_TOKEN = '6261688795:AAGS3FO8s6CrrvSUgCc8GUeAyljhLEgiU9Y'

#–∑–∞–¥–∞—ë–º –ª–æ–≥–∏ and –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = dbworker('MainBase.db')


#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'],state='*')
async def start(msg: types.Message):
	#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
	button_start = KeyboardButton('–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–ºüëå')

	magic_start = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)

	magic_start.add(button_start)
	await msg.answer('–ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–∑–µ–πüë´', reply_markup=magic_start)
	if(not db.user_exists(msg.from_user.id)):
		#–µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		db.add_user(msg.from_user.username, msg.from_user.id, msg.from_user.full_name)
		await bot.send_message(-1001406772763,f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nID - {str(msg.from_user.id)}\nusername - {str(msg.from_user.username)}')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async def get_city_name(latitude, longitude):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://nominatim.openstreetmap.org/reverse?lat={latitude}&lon={longitude}&format=json") as response:
            data = await response.json()
            city = data.get('address', {}).get('city')
            return city



#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ó–∞–π—Ç–∏ –≤ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä
@dp.message_handler(lambda msg: msg.text == '–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–ºüëå' or msg.text == '/magic_start', state='*')
async def magic_start(msg: types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é —Å–∞–º–æ–≥–æ –±–æ—Ç–∞'''
	#–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
	button_search = KeyboardButton('–ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ—á–∫–∞üîç')
	button_create_profile = KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå')
	button_edit_profile = KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìù')
	button_remove_profile = KeyboardButton('–£–¥–∞–ª–∏—Ç—åüóë')
	button_admin = KeyboardButton('–ê–¥–º–∏–Ω–∫–∞‚öôÔ∏è')
	menu = ReplyKeyboardMarkup(resize_keyboard=True)

	if(not db.profile_exists(msg.from_user.id)):
			menu.add(button_search, button_create_profile)
	elif (db.profile_exists(msg.from_user.id)):
		menu.add(button_search, button_edit_profile, button_remove_profile)
	if msg.from_user.id in config.ADMIN_LIST:
		menu.add(button_admin)
	await msg.answer('–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä —á–∞—Ç –±–æ—Ç–∞ü§ñ\n\n–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ —ç—Ç–∏–º–∏ —à—Ç—É–∫–∞–º–∏ —á—Ç–æ –≤–Ω–∏–∑—É‚öôÔ∏è', reply_markup=menu)


#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã


class CreateProfile(StatesGroup):
	name = State()
	description = State()
	city = State()
	photo = State()
	sex = State()
	age = State()
	social_link = State()

#—Ö–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìå', state='*')
async def create_profile(message: types.Message):
	#–∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
	button_exit = KeyboardButton('–í—ã–π—Ç–∏‚ùå')

	menu_exit = ReplyKeyboardMarkup()

	menu_exit.add(button_exit)

	if message.from_user.username != None:
		if(not db.profile_exists(message.from_user.id)):
			await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –∏–º–µ–Ω–∏, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?üòâ",reply_markup=menu_exit)
			await CreateProfile.name.set()
		elif(db.profile_exists(message.from_user.id)) :
			await message.answer('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞\n\n')
	else:
		await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -> Edit Profile(–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å) –∏ –∂–º—è–∫–∞–π—Ç–µ add username\n\n–¢–∞–º –≤–≤–æ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –∏ –≤—É–∞–ª—è')
#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º—è
@dp.message_handler(state=CreateProfile.name)
async def create_profile_name(message: types.Message, state: FSMContext):
	if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
		await state.finish()
		await magic_start(message)
		return
	if len(str(message.text)) < 35 and (not str(message.text) in cus_ans.ban_symvols):
		await state.update_data(profile_name=message.text.lower())
		await message.reply('–¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é')
		await CreateProfile.next()
	elif str(message.text) in cus_ans.ban_symvols:
		await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É')
	else:
		await message.answer(cus_ans.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

@dp.message_handler(state=CreateProfile.description)
async def create_profile_description(message: types.Message, state: FSMContext):
	if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
		await state.finish()
		await magic_start(message)
		return
	if len(message.text) < 35 and (not str(message.text) in cus_ans.ban_symvols):
		await state.update_data(profile_description=message.text)
		await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüëá', reply_markup=kb.keyboard_for_loc())
		await CreateProfile.next()
	elif str(message.text) in cus_ans.ban_symvols:
		await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É')
	else:
		await message.answer(cus_ans.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return

# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.message_handler(state=CreateProfile.city, content_types=ContentType.LOCATION)
async def create_profile_city(message: types.Message, state: FSMContext):

	latitude = message.location.latitude
	longitude = message.location.longitude

	city = await get_city_name(latitude, longitude)

	if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
		await state.finish()
		await magic_start(message)
		return
	if len(city) < 35 and (not str(city) in cus_ans.ban_symvols):
		await state.update_data(profile_city=city.lower())
		await message.answer('–ü—Ä–µ–ª–µ—Å—Ç–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º —Ñ–æ—Ç–æ–∫–∞—Ä—Ç–æ—á–∫—Éüñº\n\n–í–∞–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º!')
		await CreateProfile.next()
	elif str(message.text) in cus_ans.ban_symvols:
		await message.answer('–£ —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ãü§¨ü§¨\n–ó–∞–ø—è—Ç–∞—è –∫ –ø—Ä–∏–º–µ—Ä—É', reply_markup=kb.keyboard_for_loc())
	else:
		await message.answer(cus_ans.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return


#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message_handler(state=CreateProfile.photo, content_types=ContentType.PHOTO)
async def create_profile_photo(message: types.Message, state: FSMContext):
	if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
		await state.finish()
		await magic_start(message)

	#–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
	button_male = KeyboardButton('–ú—É–∂—á–∏–Ω–∞')
	button_wooman = KeyboardButton('–ñ–µ–Ω—â–∏–Ω–∞')

	sex_input = ReplyKeyboardMarkup(one_time_keyboard=True)
	sex_input.add(button_male, button_wooman)


	file_id = message.photo[-1].file_id
	await state.update_data(photo=file_id)
	await message.answer('–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª', reply_markup=sex_input)
	await CreateProfile.next()

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–∞
@dp.message_handler(state=CreateProfile.sex)
async def create_profile_sex(message: types.Message, state: FSMContext):
	if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
		await state.finish()
		await magic_start(message)
		return
	if message.text == '–ú—É–∂—á–∏–Ω–∞' or message.text == '–ñ–µ–Ω—â–∏–Ω–∞':
		await state.update_data(profile_sex=message.text.lower())
		await message.answer('–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å\n\n–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º —Ç–≤–æ–π –≤–æ–∑–≤—Ä–∞—Å—Ç')
		await CreateProfile.next()
	else:
		await message.answer(cus_ans.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Å—Ç–∞
@dp.message_handler(state=CreateProfile.age)
async def create_profile_age(message: types.Message, state: FSMContext):
	try:
		if str(message.text) == '–í—ã–π—Ç–∏‚ùå':
			await state.finish()
			await magic_start(message)
			return
		if int(message.text) < 6:
			await message.answer('–æ–πü§≠\n–¢—ã —á—ë—Ç –º–∞–ª–æ–≤–∞—Ç...')
			await message.answer(cus_ans.random_reapeat_list())

			#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
			return
		elif int(message.text) > 54:
			await message.answer('–ü–∞–∂–∏–ª–æ–π —á–µ–ª–æ–≤–µ–∫üë®‚Äç')
			await message.answer(cus_ans.random_reapeat_list())

			#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
			return
		elif int(message.text) > 6 and int(message.text) < 54:
			await state.update_data(profile_age=message.text)
			#–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
			button_skip = KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')

			skip_input = ReplyKeyboardMarkup(one_time_keyboard=True)
			skip_input.add(button_skip)
			await message.answer('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
			user_data = await state.get_data()
			db.create_profile(message.from_user.id, message.from_user.username, str(user_data['profile_name']),
						str(user_data['profile_description']), str(user_data['profile_city']), str(user_data['photo']), str(user_data['profile_sex']), str(user_data['profile_age']))
			await magic_start(message)
			await state.finish()
		else:
			await message.answer('–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
			return
	except:
		await message.answer(cus_ans.random_reapeat_list())
		#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
		return


#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—åüóë')
async def delete_profile(message: types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã'''
	await send_log(message)
	try:
		db.delete_profile(message.from_user.id)
		await message.answer('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
		await magic_start(message)
	except:
		await message.answer(cus_ans.random_reapeat_list())
		return


@dp.message_handler(lambda message: message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìù')
async def edit_profile(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã'''
	await send_log(message)
	try:
		if(not db.profile_exists(message.from_user.id)):
			await message.answer('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã!')
		elif(db.profile_exists(message.from_user.id)) :
			photo = db.all_profile(message.from_user.id)[0][6]
			#–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
			button_again = KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æüîÑ')

			button_edit_description = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ãüìù')

			button_edit_age = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–¥–∏–∫–æ–≤üë∂')

			button_cancel = KeyboardButton('–í—ã–π—Ç–∏‚ùå')

			edit_profile = ReplyKeyboardMarkup(one_time_keyboard=True)
			edit_profile.add(button_again, button_edit_description, button_edit_age, button_cancel)
			caption = '–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n–ò–º—è - ' + str(db.all_profile(message.from_user.id)[0][3]).title() + '\n–û–ø–∏—Å–∞–Ω–∏–µ - ' + str(db.all_profile(message.from_user.id)[0][4]) + '\n–ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æüåé - ' + str(db.all_profile(message.from_user.id)[0][5]).title() + '\n–°–∫–æ–ª—å–∫–æ –≥–æ–¥–∏–∫–æ–≤?) - ' + str(db.all_profile(message.from_user.id)[0][8])
			await message.answer_photo(photo, caption=caption, reply_markup=edit_profile)
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return


#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ
@dp.message_handler(lambda message: message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æüîÑ')
async def edit_profile_again(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ'''
	await send_log(message)
	try:
		db.delete_profile(message.from_user.id)
		await create_profile(message)

	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class EditProfile(StatesGroup):
	description_edit = State()
	age_edit = State()

#—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Å—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã

@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–¥–∏–∫–æ–≤üë∂' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ãüìù')
async def edit_profile_age(message : types.Message):
	try:
		#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
		button_cancel = KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå')

		button_cancel_menu = ReplyKeyboardMarkup(one_time_keyboard=True)

		button_cancel_menu.add(button_cancel)

		if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–¥–∏–∫–æ–≤üë∂':
			await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Å—Ç',reply_markup=button_cancel_menu)
			await EditProfile.age_edit.set()
		elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ãüìù':
			await message.answer('–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Ö–∞–π–ø –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã!',reply_markup=button_cancel_menu)
			await EditProfile.description_edit.set()
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return
@dp.message_handler(state=EditProfile.age_edit)
async def edit_profile_age_step2(message: types.Message, state: FSMContext):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Å—Ç–∞ –≤ –±–¥'''
	await send_log(message)
	try:
		if str(message.text) == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
			await state.finish()
			await magic_start(message)

			return
		elif int(message.text) < 6:
			await message.answer('–æ–πü§≠\n–¢—ã —á—ë—Ç –º–∞–ª–æ–≤–∞—Ç...')
			await message.answer(cus_ans.random_reapeat_list())

			#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
			return
		elif int(message.text) > 54:
			await message.answer('–ü–∞–∂–∏–ª–æ–π —á–µ–ª–æ–≤–µ–∫üë®‚Äç')
			await message.answer(cus_ans.random_reapeat_list())

			#–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
			return
		elif int(message.text) > 6 and int(message.text) < 54:
			await message.answer('–ú–∞–ª—ã–π –ø–æ–≤–∑—Ä–æ—Å–ª–µ–ª –ø–æ–ª—É—á–∞–µ—Ç—Å—èü§ó\n\n–í–æ–∑–≤—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ë–Ω!')
			await state.update_data(edit_profile_age=message.text)
			user_data = await state.get_data()

			db.edit_age(user_data['edit_profile_age'],str(message.from_user.id))
			await state.finish()
			await edit_profile(message)
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		photorint(e)
		return
@dp.message_handler(state=EditProfile.description_edit)
async def edit_profile_description(message: types.Message, state: FSMContext):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–¥'''
	await send_log(message)
	try:
		if str(message.text) == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
			await state.finish()
			await magic_start(message)

			return
		await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—Ä–æ–¥–∏\n\n–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!')
		await state.update_data(edit_profile_description=message.text)
		user_data = await state.get_data()

		db.edit_description(user_data['edit_profile_description'],str(message.from_user.id))
		await state.finish()
		await edit_profile(message)
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return

@dp.message_handler(lambda message: message.text == '–í—ã–π—Ç–∏‚ùå')
async def exit(message: types.Message):
	await magic_start(message)

''''''

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class SearchProfile(StatesGroup):
	in_doing = State()

#—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–Ω–∫–µ—Ç–∞–º
@dp.message_handler(lambda message: message.text == '–ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ—á–∫–∞üîç')
async def search_profile(message: types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞,–ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –±–¥'''
	await send_log(message)
	try:
		if db.profile_exists(message.from_user.id) == False:
			await message.answer('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∑–∞–ø–æ–ª–Ω–∏ –µ—ë –∞ –ø–æ—Ç–æ–º –ø—Ä–∏—Ö–æ–¥–∏ —Å—é–¥–∞!')
		else:
			await message.answer('–ü–æ–µ—Ö–∞–ª–∏!')
			await SearchProfile.next()
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		print(e)
		return

# @dp.message_handler(state=SearchProfile.city_search)
# async def seach_profile_step2(message: types.Message, state: FSMContext):
# 	'''–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞'''
# 	await send_log(message)
#
# 	await state.update_data(search_profile_city=message.text.lower())
#
# 	user_data = await state.get_data()
#
# 	db.set_city_search(str(user_data['search_profile_city']), str(message.from_user.id))
# 	if (bool(len(db.search_profile(str(db.get_info_user(str(message.from_user.id))[4]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))))):
# 		try:
# 			profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[4]), str(db.get_info(str(message.from_user.id))[8]), str(db.get_info(str(message.from_user.id))[7]))
# 		except:
# 			db.edit_zero_profile_status(message.from_user.id)
# 			profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[4]), str(db.get_info(str(message.from_user.id))[8]), str(db.get_info(str(message.from_user.id))[7]))
# 		await state.update_data(last_profile_id=profile_id)
# 		db.edit_profile_status(str(message.from_user.id), db.search_profile_status(str(message.from_user.id))[0])






@dp.message_handler(state=SearchProfile.in_doing)
async def seach_profile_step3(message: types.Message, state: FSMContext):
	await send_log(message)

	if (bool(len(db.search_profile(str(db.get_info_user(str(message.from_user.id))[4]),
								   str(db.get_info(str(message.from_user.id))[8]),
								   str(db.get_info(str(message.from_user.id))[7]))))):
		try:
			profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[4]), str(db.get_info(str(message.from_user.id))[8]), str(db.get_info(str(message.from_user.id))[7]))
		except:
			db.edit_zero_profile_status(message.from_user.id)
			profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[4]), str(db.get_info(str(message.from_user.id))[8]), str(db.get_info(str(message.from_user.id))[7]))
		await state.update_data(last_profile_id=profile_id)
		db.edit_profile_status(str(message.from_user.id), db.search_profile_status(str(message.from_user.id))[0])

	# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
	button_like = KeyboardButton('üëç')

	button_dislike = KeyboardButton('üëé')

	button_other = KeyboardButton('–í—Å—è—á–∏–Ω–∞üëú')

	button_report = KeyboardButton('–†–µ–ø–æ—Ä—Çüë∫')

	mark_menu = ReplyKeyboardMarkup()

	mark_menu.add(button_dislike, button_like, button_report, button_other)

	name_profile = str(db.get_info(profile_id)[3])
	age_profile = str(db.get_info(profile_id)[8])
	description_profile = str(db.get_info(profile_id)[4])
	photo_profile = open('photo_user/' + str(profile_id) + '.jpg', 'rb')

	city = str(db.get_info_user(profile_id)[4])

	final_text_profile = f'–°–º–æ—Ç—Ä–∏, –∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è –Ω–∞—à—ë–ª‚ò∫Ô∏è\n\n{name_profile},{age_profile},{city}\n{description_profile}'

	await message.answer_photo(photo_profile, caption=final_text_profile, reply_markup=mark_menu)


	'''–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–µ–π –æ—Ü–µ–Ω–∫–∏(–ª–∞–π–∫,–¥–∏–∑–ª–∞–π–∫,—Ä–µ–ø–æ—Ä—Ç)'''
	#await send_log(message)
	try:
		if str(message.text) == 'üëç':
			if str(message.text) == '/start' or str(message.text) == '–í—ã–π—Ç–∏‚ùå':
				await state.finish()
				await magic_start(message)

			user_data = await state.get_data()

			try:
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[4]), str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except IndexError:
				db.edit_zero_profile_status(message.from_user.id)
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[4]), str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except Exception as e:
				print(e)
				await state.finish()
				await magic_start(message)
			await state.update_data(last_profile_id=profile_id)
			if db.add_like_exists(str(message.from_user.id),user_data['last_profile_id']) == False:
				db.add_like(str(message.from_user.id), user_data['last_profile_id'])
				db.up_rating(db.check_rating(message.from_user.id)[0], user_data['last_profile_id'])
			db.edit_profile_status(str(message.from_user.id), db.search_profile_status(str(message.from_user.id))[0])
			name_profile = str(db.get_info(message.from_user.id)[3])
			age_profile = str(db.get_info(message.from_user.id)[8])
			description_profile = str(db.get_info(message.from_user.id)[4])

			photo_profile = open('photo_user/' + str(message.from_user.id) + '.jpg','rb')

			city = str(user_data['search_profile_city']).title()

			final_text_profile = f'–°–º–æ—Ç—Ä–∏, –∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è –Ω–∞—à—ë–ª‚ò∫Ô∏è\n\n{name_profile},{age_profile},{city}\n{description_profile}'

			await message.answer_photo(photo_profile,caption=final_text_profile)

			name_profile_self = str(db.get_info(str(message.from_user.id))[3])
			age_profile_self = str(db.get_info(str(message.from_user.id))[8])
			description_profile_self = str(db.get_info(str(message.from_user.id))[4])

			photo_profile_self = open('photo_user/' + str(message.from_user.id) + '.jpg','rb')

			final_text_profile_self = f'–¢–æ–±–æ–π –∫—Ç–æ —Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è!\n–°–∞–º –≤ —à–æ–∫–µüòÆ..\n\n{name_profile_self},{age_profile_self},{city}\n{description_profile_self}\n\n–ß–µ–≥–æ —Ç—ã –∂–¥—ë—à—å,–±–µ–≥–∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è - @{str(message.from_user.username)}'

			await bot.send_photo(user_data['last_profile_id'],photo_profile_self,caption=final_text_profile_self)


			return
			await state.finish()
		elif str(message.text) == 'üëé':
			if str(message.text) == '/start' or str(message.text) == '–í—ã–π—Ç–∏‚ùå':
				await state.finish()
				await magic_start(message)

			user_data = await state.get_data()

			try:
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[4]), str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))
			except IndexError:
				db.edit_zero_profile_status(message.from_user.id)
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[4]), str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))
			except Exception as e:
				print(e)
				await state.finish()
				await magic_start(message)

			await state.update_data(last_profile_id=profile_id)

			db.edit_profile_status(str(message.from_user.id),db.search_profile_status(str(message.from_user.id))[0])
			name_profile = str(db.get_info(profile_id[0][0])[3])
			age_profile = str(db.get_info(profile_id[0][0])[8])
			description_profile = str(db.get_info(profile_id[0][0])[4])
			social_link_profile = str(db.get_info(profile_id[0][0])[9])
			photo_profile = open('photo_user/' + str(profile_id[0][0]) + '.jpg','rb')

			city = str(user_data['search_profile_city']).title()

			final_text_profile = f'–°–º–æ—Ç—Ä–∏, –∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è –Ω–∞—à—ë–ª‚ò∫Ô∏è\n\n{name_profile},{age_profile},{city}\n{description_profile}'

			await message.answer_photo(photo_profile, caption=final_text_profile)
		elif str(message.text) == '–†–µ–ø–æ—Ä—Çüë∫':

			if str(message.text) == '/start' or str(message.text) == '–í—ã–π—Ç–∏‚ùå':
				await state.finish()
				await magic_start(message)

			user_data = await state.get_data()



			try:
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except IndexError:
				db.edit_zero_profile_status(message.from_user.id)
				profile_id = db.search_profile(str(db.get_info_user(str(message.from_user.id))[6]),str(db.get_info(str(message.from_user.id))[8]),str(db.get_info(str(message.from_user.id))[7]))[db.search_profile_status(str(message.from_user.id))[0]][0]
			except Exception as e:
				print(e)
				await state.finish()
				await magic_start(message)
			#–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞
			await state.update_data(last_profile_id=profile_id)
			if(db.report_exists(str(message.from_user.id),user_data['last_profile_id']) == False):
				db.throw_report(str(message.from_user.id),user_data['last_profile_id'])
				await message.answer('–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ü•∞')
			else:
				await message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –¥–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É!\n–ß—ë–∂ –≤—ã –µ–≥–æ —Ç–∞–∫ —Ö–µ–π—Ç–∏—Ç–µ..üò¶')
			db.edit_profile_status(str(message.from_user.id),db.search_profile_status(str(message.from_user.id))[0])

			name_profile = str(db.get_info(profile_id[0][0])[3])
			age_profile = str(db.get_info(profile_id[0][0])[8])
			description_profile = str(db.get_info(profile_id[0][0])[4])

			photo_profile = open('photo_user/' + str(profile_id[0][0]) + '.jpg', 'rb')

			city = str(user_data['search_profile_city']).title()

			final_text_profile = f'–°–º–æ—Ç—Ä–∏, –∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è –Ω–∞—à—ë–ª‚ò∫Ô∏è\n\n{name_profile},{age_profile},{city}\n{description_profile}'

			await message.answer_photo(photo_profile,caption=final_text_profile)
		elif str(message.text) == '–í—Å—è—á–∏–Ω–∞üëú':
			await other(message)
		elif str(message.text) == '–û—Ç–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏–π‚óÄÔ∏è':
			await backup(message)
		else:
			await state.finish()
			await magic_start(message)
	except Exception as e:
		await message.answer(cus_ans.random_reapeat_list())
		await state.finish()
		await magic_start(message)
		print(e)
		return

''''''

#—Ö–µ–Ω–¥–ª–µ—Ä –≤—Å—è—á–∏–Ω—ã
@dp.message_handler(lambda message: message.text == '–í—Å—è—á–∏–Ω–∞')
async def other(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Å—è—á–∏–Ω–∞'''
	await send_log(message)
	#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å—è–∫–æ–π –≤—Å—è—á–∏–Ω—ã

	button_backup = KeyboardButton('–û—Ç–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏–π‚óÄÔ∏è')

	button_exit = KeyboardButton('–í—ã–π—Ç–∏‚ùå')

	menu_other = ReplyKeyboardMarkup()

	menu_other.add(button_exit,button_backup)
	await message.answer('–¢—É—Ç —Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–Ω–æ–≥–æ —Ö–∏—Ç—Ä—ã—Ö –∏ –Ω–µ –æ—á–µ–Ω—å –º–∞—Ö–∏–Ω–∞—Ü–∏–π',reply_markup=menu_other)


#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π
class Backup(StatesGroup):
	step1 = State()
	mark = State()

#—Ö–µ–Ω–¥–ª–µ—Ä –æ—Ç–∫–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π
@dp.message_handler(lambda message: message.text == '–û—Ç–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏–π‚óÄÔ∏è')
async def backup(message : types.Message):
	await send_log(message)
	await message.answer('–ß–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç, —á—Ç–æ –≤ –ø–æ—Ç–æ–∫–µ —Å–∫—É—á–Ω—ã—Ö –∞–Ω–∫–µ—Ç –Ω–∞—Ç—ã–∫–∞–µ—à—å—Å—è –Ω–∞ ‚Äú—Å–∞–º–æ—Ä–æ–¥–æ–∫‚Äù, –Ω–æ —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∂–∏–º–∞–µ—à—å –¥–∏–∑ –ø–æ —Ä–µ—Ñ–ª–µ–∫—Å—É.\n\n–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ª–∞–π–∫–Ω—É—Ç—å –ª—é–±—É—é –∞–Ω–∫–µ—Ç—É!\n–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏–º—è,–≤–æ–∑–≤—Ä–∞—Å—Ç,–≥–æ—Ä–æ–¥ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n–ü—Ä–∏–º–µ—Ä -  –≥–ª—ç–∫,18,–≥–æ–º–µ–ª—å,–ª—é–±–ª—é –ø–∏—Ç—Å—É')
	await message.answer_sticker('CAACAgIAAxkBAAED6aNfAAFG6dxnzzi3__WF6jWbJ7YPNYsAAkICAAKezgsAAVYiws5K51M1GgQ')
	await Backup.step1.set()

@dp.message_handler(state=Backup.step1)
async def backup_step1(message: types.Message, state: FSMContext):
	await send_log(message)
	try:
		if message.text == '–í—ã–π—Ç–∏‚ùå':
			await magic_start(message)
			await state.finish()
		msg_text = message.text

		msg_split = msg_text.split(',')

		name = msg_split[0]
		age = msg_split[1]
		city = msg_split[2].lower()
		description = msg_split[3]

		final = name + age + city + description
		if len(db.backup(name,age,city,description)) == 1:
			print(db.backup(name,age,city,description)[0][0])
			photo_profile_self = open('photo_user/' + db.backup(name,age,city,description)[0][0] + '.jpg','rb')

			#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
			button_like = KeyboardButton('üëç')

			button_dislike = KeyboardButton('üëé')

			mark_menu_other = ReplyKeyboardMarkup()

			mark_menu_other.add(button_dislike,button_like)

			name_profile = str(db.get_info(db.backup(name,age,city,description)[0][0])[3])
			age_profile = str(db.get_info(db.backup(name,age,city,description)[0][0])[8])
			description_profile = str(db.get_info(db.backup(name,age,city,description)[0][0])[4])
			social_link_profile = str(db.get_info(db.backup(name,age,city,description)[0][0])[9])
			city = str(db.get_info(db.backup(name,age,city,description)[0][0])[5])

			await state.update_data(last_backup=db.backup(name,age,city,description)[0][0])

			final_text_profile = f'–°–º–æ—Ç—Ä–∏, –∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è –Ω–∞—à—ë–ª‚ò∫Ô∏è\n\n{name_profile},{age_profile},{city}\n{description_profile}'
			print(final_text_profile)
			await message.answer_photo(photo_profile_self,caption=final_text_profile,reply_markup=mark_menu_other)
			await Backup.next()
		else:
			await message.answer('–Ø –Ω–µ —Å–º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É!\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é!')
			print(len(db.backup(name,age,city,description)))
			return
	except Exception as e:
		await message.answer('–Ø –Ω–µ —Å–º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É!\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é!')
		print(len(db.backup(name,age,city,description)))
		print(e)
		return

@dp.message_handler(state=Backup.mark)
async def backup_step2(message: types.Message, state: FSMContext):
	user_data = await state.get_data()
	print('—Ö—É–π')
	if str(message.text) == 'üëç':
		await message.answer('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')

		photo_self = open(f'photo_user/{message.from_user.id}.jpg','rb')
		name_profile_self = str(db.get_info(str(message.from_user.id))[3])
		age_profile_self = str(db.get_info(str(message.from_user.id))[8])
		description_profile_self = str(db.get_info(str(message.from_user.id))[4])
		social_link_profile_self = str(db.get_info(str(message.from_user.id))[9])
		city = str(db.get_info(str(message.from_user.id))[5])

		photo_profile_self = open('photo_user/' + str(message.from_user.id) + '.jpg','rb')


		final_text_profile_self = f'–¢–æ–±–æ–π –∫—Ç–æ —Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è!\n–°–∞–º –≤ —à–æ–∫–µüòÆ..\n\n{name_profile_self},{age_profile_self},{city}\n{description_profile_self}\n\n–ß–µ–≥–æ —Ç—ã –∂–¥—ë—à—å,–±–µ–≥–∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è - @{str(message.from_user.username)}'

		await bot.send_photo(str(user_data['last_backup']),photo_self,caption=final_text_profile_self)
		await state.finish()
		await magic_start(message)
	elif message.text == 'üëé':
		await message.answer('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
		await state.finish()
		await magic_start(message)
	else:
		await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!')
		return
	await send_log(message)


''''''
#–∞–¥–º–∏–Ω–∫–∞
@dp.message_handler(lambda message: message.text == '–ê–¥–º–∏–Ω–∫–∞‚öôÔ∏è')
async def admin(message: types.Message):
	if message.from_user.id in config.ADMIN_LIST:

		await message.answer('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å /sendmsg_admin,user_id,msg')
	else:
		await message.answer('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')

@dp.message_handler(lambda message: message.text.startswith('/sendmsg_admin'),state='*')
async def admin_send_msg(message: types.Message):
	if message.from_user.id in config.ADMIN_LIST:
		msg = message.text.split(',')
		await bot.send_message(msg[1], msg[2])
		await message.answer('')
	else:
		await message.answer('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')


# @dp.message_handler(commands='que')
# async def que(msg: types.Message):
# 	await msg.answer(db.all_profile(msg.from_user.id))
# 	await msg.answer((db.all_profile(msg.from_user.id)[0][3]).title())
# 	await msg.answer(db.all_profile(msg.from_user.id)[0][4])
# 	await msg.answer(db.all_profile(msg.from_user.id)[0][5])
# 	await msg.answer(db.all_profile(msg.from_user.id)[0][6])
# 	await msg.answer(db.all_profile(msg.from_user.id)[0][8])


@dp.message_handler(state='*')
async def send_log(message: types.Message):
	await bot.send_message(5302034245,f'ID - {str(message.from_user.id)}\nusername - {str(message.from_user.username)}\nmessage - {str(message.text)}')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)